package top.txwgoogol.designpattern.observer;

/**
 * 观察者模式
 * 使用场景
 * 1. 关联行为场景，需要注意的是关联行为是可拆分的，而不是"组合"关系
 * 2. 事件多级触发场景
 * 3. 跨系统的消息交换场景，如消息对象咧，事件总线的处理机制。
 * 主要作用是解耦，将观察者与被观察者完全隔离，只依赖与Observer和Observable抽象
 * 优点：
 * 观察者和被观察者是抽象耦合，应对业务变化。
 * 增强系统灵活性、可拓展性。
 * 缺点：
 * 需要考虑开发效率和运行效率。一个观察者卡度，会影响整体的执行效率，这种情况采取异步方式。
 * @author txwgoogol
 * @date 2017/11/8.
 */
public class Observer {
}
