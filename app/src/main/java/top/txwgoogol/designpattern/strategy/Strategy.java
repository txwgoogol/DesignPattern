package top.txwgoogol.designpattern.strategy;

/**
 * 策略模式
 * 策略模式主要用来分离算法，在相同的行为抽象下又不同的具体实现策略。
 * 这个模式很好的演示了开闭原则也就是抽象定义，注入不同的实现，从而达到很好的拓展。
 * 使用场景：
 * 1. 针对同一类型的多种处理方式，紧急是具体行为有差别的时候
 * 2. 需要安全的封装多种同一类型的操作
 * 3. 出现同一抽象类有多个子类，而又需要使用if-else或使用switch-case 来选择具体子类时。
 * 优点：
 * 结构清晰明了、使用简单直观
 * 耦合度相对而言较低，拓展方便
 * 操作封装更为彻底，数据更为安全
 * 缺点：
 * 随着策略的增加，子类也会变得繁多。
 * @author txwgoogol
 * @date 2017/11/8.
 */
public class Strategy {
}
