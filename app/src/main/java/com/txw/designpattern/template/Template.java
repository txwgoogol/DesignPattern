package com.txw.designpattern.template;

/**
 * 模版方法模式
 * 使用场景
 * 1. 多个子类有共有的方法，并且逻辑基本相同
 * 2. 重要复杂的算法，可以把核心算法设计为模版方法，周边的相关袭击功能则由哥哥子类实现
 * 3. 重构时，模版方法模式是一个经常使用的模式，把相同的代码抽取到父类中，然后通过钩子函数约束其行为
 * 四个字概括模版方法: 流程封装 把某个固定的流程封装到一个final函数中，
 * 并且让子类能够定制这个流程中的某些或者所有步骤，这就要求父类提取共用的代码，提升代码的复用率，同时也带来更好的拓展
 * 优点：
 * 1. 封装不变部分，拓展可变部分
 * 2. 提取公共部分，便于维护
 * 缺点：
 * 1. 模版方法会带来代码阅读的难度，让用户觉得难以理解
 *
 * @author txw
 * @date 2017/11/8.
 */
public class Template {
}
